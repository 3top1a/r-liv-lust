// utils.rs
// Goal: Take the filth from important classes to simplify the code

extern crate image;

// Vertex type
#[derive(Copy, Clone)]
pub struct Vertex {
	position: [f32; 2],
	tex_coords: [f32; 2],
}
glium::implement_vertex!(Vertex, position, tex_coords);

// Utilities for ui.rs
pub struct UiUtils {}
impl UiUtils {
	// Read image file
	// replaces image::open(name);
	pub fn load_texture(
		display: &glium::Display,
		filename: String,
	) -> Result<glium::texture::SrgbTexture2d, u8> {
		let name = &filename;

		if !std::path::Path::new(name).exists() {
			eprintln!("File doesn't exist!");
			std::process::exit(1);
		}

		// Takes ~60% of the loading time
		let iimage = image::open(name).unwrap();

		let size = image::image_dimensions(name).unwrap();

		// TODO Optimize this loading function
		// `&iimage.into_rgba8()` Why 16 bit? Why alpha?
		// Shouldn't the function be determined seperately?
		// 40% of images are 8bit
		// 80% of images are **not** transparent
		// Takes ~40% of the loading time
		let image =
			glium::texture::RawImage2d::from_raw_rgba_reversed(&iimage.into_rgba16().to_vec(), size);

		Ok(glium::texture::SrgbTexture2d::with_mipmaps(
			display,
			image,
			glium::texture::MipmapsOption::AutoGeneratedMipmaps,
		)
		.unwrap())
	}

	// Quad
	pub const QUAD: [Vertex; 4] = [
		Vertex {
			position: [-1.0, -1.0],
			tex_coords: [0.0, 0.0],
		},
		Vertex {
			position: [-1.0, 1.0],
			tex_coords: [0.0, 1.0],
		},
		Vertex {
			position: [1.0, 1.0],
			tex_coords: [1.0, 1.0],
		},
		Vertex {
			position: [1.0, -1.0],
			tex_coords: [1.0, 0.0],
		},
	];
}
